<?php
/**
 * Implementation of hook_menu()
 */
function textfield_limiter_menu() {
	$menu = array();
	
	$menu['admin/settings/textfield_limiter'] = array(
		'title' => 'Text Field Limiter Settings',
		'description' => 'Setting up text shorteners',
		'page arguments' => array('textfield_limiter_settings_form'),
		'page callback' => 'drupal_get_form',
		'access arguments' => array('administer site content'),
		'type' => MENU_NORMAL_ITEM,
	);
	
	return $menu;
}

/**
 * Implementation of hook_nodeapi()
 */
function textfield_limiter_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	// Alter node before save
	if ($op == 'presave') {
		$res = db_query("SELECT field_name, size_limit FROM textfield_limiter WHERE node_type like '%s'", $node->type);
		if (db_affected_rows($res) == 0) {
			// No field needs to be limit
			return;
		}
		require('TextSizeLimiter.php');
		$limiter = new TextSizeLimiter();
		while ($limit_set = db_fetch_object($res)) {
			$field_name = $limit_set->field_name;
			$field = $node->$field_name;
			$limiter->setLimit(intval($limit_set->size_limit));
			$limiter->load($field[0]['value']);
			$field[0]['value'] = $limiter->run();
			$node->$field_name = $field;
		}
	}
}

/**
 * Implementation of settings menu
 */
function textfield_limiter_settings_form() {
	$form = array();
	// Retrieving all previous limiters
	$res = db_query("SELECT tlid, node_type, field_name, size_limit FROM textfield_limiter");
	$form['limiters'] = array(
		'#type' => 'fieldset',
		'#title' => t('Limiters setted'),
		'#tree' => TRUE,
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#theme' => 'textfield_limiter_settings_form_table',
		'items' => array(),
	);
	while ($limiter = db_fetch_object($res)) {
		$form['limiters']['items'][$limiter->tlid] = array(
			'#type' => 'fieldset',
			'#tree' => TRUE,
		);
		$form['limiters']['items'][$limiter->tlid]['node_type'] = array(
			'#value' => $limiter->node_type,
		);
		$form['limiters']['items'][$limiter->tlid]['field_name'] = array(
			'#value' => $limiter->field_name,
		);
		$form['limiters']['items'][$limiter->tlid]['size_limit'] = array(
			'#type' => 'textfield', // @TODO make a select box with valid text fields of the node
			'#default_value' => $limiter->size_limit,
			'#size' => 4,
			'#max_size' => 4,
		);
		$form['limiters']['items'][$limiter->tlid]['delete-' . $limiter->tlid] = array(
			'#type' => 'checkbox',
		);
	}
	$form['limiters']['Update'] = array(
		'#type' => 'submit',
		'#value' => t('Update'),
	);
	$form['add_limiter'] = array(
		'#type' => 'fieldset',
		'#title' => 'Add a limiter',
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#tree' => TRUE,
	);
	$form['add_limiter']['type'] = array(
		'#type' => 'select',
		'#title' => t('Node Type'),
		'#options' => array_map('check_plain', node_get_types('names')),
	);
	$form['add_limiter']['field'] = array(
		'#type' => 'textfield',
		'#title' => t('Field name'), // @TODO make a select box with possible fields retrieve via ajax
		'#size' => 12,
		'#max_size' => 32,
	);
	$form['add_limiter']['limit'] = array(
		'#type' => 'textfield',
		'#title' => t('Limit'), 
		'#size' => 4,
		'#max_size' => 4,
	);
	$form['add_limiter']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);
	
	return $form;
}

/**
 * Settings form validation
 */
function textfield_limiter_settings_form_validate($form, $form_state) {
  // checking for adding
  if ($form_state['clicked_button']['#value'] == t('Add')) {
    if (!is_numeric($form_state['values']['add_limiter']['limit'])) {
      form_set_error('limit', t('Limit should be an integer'));
    }
    // @TODO check that field exists
  } else if ($form_state['clicked_button']['#value'] == t('Update')) {
    foreach($form_state['values']['limiters']['items'] as $tlid => $limit) {
	    if (!is_numeric($limit['size_limit'])) {
        form_set_error('size_limit', t('Limit should be an integer'));
        break;
      }
	  }
  }
}

/**
 * Settings form submittion
 */
function textfield_limiter_settings_form_submit($form, $form_state) {
	// Chcking if this is an update or an addition
	if ($form_state['clicked_button']['#value'] == t('Add')) {
	  // Adding a new entry
		db_query("INSERT INTO {textfield_limiter} (node_type, field_name, size_limit)
																VALUES ('%s', '%s', %d)", $form_state['values']['add_limiter']['type'], $form_state['values']['add_limiter']['field'], $form_state['values']['add_limiter']['limit']);
	} else if ($form_state['clicked_button']['#value'] == t('Update')) {
	  // Updating data or deleting if needed
	  foreach($form_state['values']['limiters']['items'] as $tlid => $limit) {
	    // checking for delete
	    if ($limit['delete-' . $tlid] == 1) {
	      db_query("DELETE FROM {textfield_limiter} WHERE tlid=%d", $tlid);
	    } else {
	      // Not a delete, update the value
	      $limit['size_limit'] = intval($limit['size_limit']);
	      db_query("UPDATE {textfield_limiter} SET size_limit=%d WHERE tlid=%d", $limit['size_limit'], $tlid);
	    }
	  }
	} 
}

/**
 * Implementation of hook_theme
 */
function textfield_limiter_theme() {
	return array(
		'textfield_limiter_settings_form_table' => array('arguments' => array('form' => NULL),),
	);
}

/**
 * Creating the theme function
 */
function theme_textfield_limiter_settings_form_table($element) {
	$rows = array();
	foreach (element_children($element['items']) as $key) {
      $elem = $element['items'][$key];
			$row = array();
			$row[] = array('data' => drupal_render($elem['node_type']));
			$row[] = array('data' => drupal_render($elem['field_name']),
											'class' => 'textfield');
			$row[] = array('data' => drupal_render($elem['size_limit']),
											'class' => 'textfield');
			$row[] = array('data' => drupal_render($elem['delete-' . $key]),
											'class' => 'checkbox');
			$rows[] = $row;
		}

		// Individual table headers.
		$header = array();
		$header[] = t('Type');
		$header[] = array('data' => t('Field Name'), 'class' => 'textfield');
		$header[] = array('data' => t('Size Limit'), 'class' => 'textfield');
		$header[] = array('data' => t('Delete'), 'class' => 'checkbox');
		$output = theme('table', $header, $rows);
		$output .= drupal_render($element['Update']);
		return $output;
}